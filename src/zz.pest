WHITESPACE  = _{ " " | "\t" | NEWLINE}
COMMENT = _{
    ("/*" ~ (!"*" ~ ANY) ~ (!"*/" ~ ANY)* ~ "*/") |
    ("//" ~ (!"/" ~ ANY) ~ (!NEWLINE ~ ANY)* ~ NEWLINE )
}
doc_comment = @{
    ("/**" ~ (!"*/" ~ ANY)* ~ "*/") |
    ("///" ~ (!NEWLINE ~ ANY)* ~ NEWLINE)

}


// literals

alpha       = { 'a'..'z' | 'A'..'Z' }
digit       = { '0'..'9' }
hexdigit    = { '0'..'9' | 'a'..'f' }
bitdigit    = { '0'..'1' }


string_literal1 = @{ "\"" ~ ( "\"\"" | "\\\""    | (!"\"" ~ ANY) )* ~ "\"" }
string_literal2 = @{ "r#\"" ~  (!"\"#" ~ ANY)* ~ "\"#" }
string_literal  = @{ string_literal2 | string_literal1 }

bool_literal    = @{"false" | "true"}
char_literal    = @{ "'" ~ ( "''" | "\\'" | (!"'" ~ ANY) )* ~ "'" }
number_literal  = @{ hex_literal | bit_literal | (int_literal ~ ("." ~ digit*)? ~ (^"e" ~ int_literal)?) }
int_literal     = @{ ("+" | "-")? ~ digit+ }
hex_literal     = @{ "0x"  ~ hexdigit+ }
bit_literal     = @{ "0b"  ~ bitdigit+ }

// keywords

keyword    = {
    exported     |
    key_shared   |
    key_const    |
    key_packed   |
    key_mut      |
    key_for      |
    key_while    |
    key_if       |
    key_else     |
    key_mark     |
    key_break    |
    key_continue |
    key_unsafe   |
    key_default  |
    key_switch   |
    key_where    |
    key_model
}

exported    = { "export" }
key_shared  = { "pub" }
key_const   = { "const"   }
key_packed  = { "packed"   }
key_mut     = { "mutable" | "mut" }
key_for     = { "for"}
key_while   = { "while"}
key_if      = { "if" }
key_else    = { "else" }
key_return  = { "return" }
key_continue= { "continue" }
key_mark    = { "is" }
key_switch  = { "switch" }
key_break   = { "break" }
key_default = { "default" }
key_unsafe  = { "unsafe" }
key_inline  = { "inline" }
key_where   = { "where" }
key_model   = { "model" }
key_struct  = { "struct" }
key_union   = { "union" }

// type identifiers

ident       = @{!(keyword ~ !(alpha | "_")) ~ ((alpha | "_") ~ (alpha | digit | "_")*)}
qident_inner= ${( (!")" ~ ANY) )*}
qident      = @{ "(" ~ qident_inner ~ ")" }
star        = @{ "*" }
local_i     = {(ident | qident) ~ ( WHITESPACE+  ~ "as" ~ WHITESPACE+ ~ (ident | qident))?}
local       = { "{" ~ WHITESPACE* ~ local_i ~ WHITESPACE* ~ ("," ~ WHITESPACE* ~ local_i )* ~ WHITESPACE* ~ ","? ~ WHITESPACE*~ "}" }
namespace   = ${ "::" ? ~ ident ~ "::" ~ namespace? }


param_short = !{ type_name ~ "=" ~ expr }
param       = _{ tail | param_short |  expr  }
params      = !{ "[" ~ (param ~ ",")* ~ param? ~ "]" }
tail        = ${ "+" ~ (ident | digit*) }
type_name   = ${ namespace? ~ ident }
tag_name    = ${ (ident | key_mut | key_unsafe) ~ ("<" ~ expr ~ ">")? }
ptr         = !{"*"}
type_part   = _{ (tag_name | ptr ) }
anon_type   = !{ type_name ~ (tail | params)? ~ type_part* }
type_name_with_tail = ${type_name ~ ( tail | params)?}
named_type  = !{ type_name_with_tail ~ named_typei}
named_typei = _{ type_part  ~ named_typei | ident }


// declarations

macro_ident = ${"@" ~ type_name}
macrocall   = {macro_ident ~ "(" ~ call_args? ~ ")" }
fn_attr     = {"inline" | "extern"}
fn_arg      = { named_type ~ ( "=" ~ expr)? }
fn_args     = { fn_arg ~ ( "," ~ fn_arg )* ~ ( "," ~ vararg)? ~  ","? }
ret_arg     = {"->"? ~ anon_type }

call_assert = {"where" ~ expr }
call_effect = {"model" ~ expr }
function    = { ( exported | key_shared)? ~ fn_attr* ~ "fn" ~ ident ~ "(" ~ fn_args? ~")" ~ ret_arg? ~ ( macrocall | call_assert | call_effect)* ~ gblock }
closure     = { ( exported | key_shared)? ~ fn_attr* ~ "closure" ~ ident ~ "(" ~ fn_args? ~")" ~ ret_arg? ~ ";"? }
theory      = { ( exported | key_shared)? ~ "theory" ~ ident ~ "(" ~ fn_args? ~")" ~ ret_arg? ~ theory_impl? ~ ";"? }
theory_impl = { "(" ~ expr ~ ")" }


enum_i      = { ident ~ ( "=" ~ int_literal)? }
enum_list   = _{enum_i ~ "," ~ enum_list | enum_i  }
ienum       = { (exported | key_shared)? ~ "enum" ~ ident ~  macrocall* ~"{" ~ enum_list? ~ ","?  ~ "}"  }

symbol        = { ( exported | key_shared)? ~ "symbol" ~ ident  ~ ";" }

cimport     = ${ ("<" ~ (!">" ~ ANY)* ~ ">") | ("\"" ~ (!"\"" ~ ANY)* ~ "\"")  }
importalias = { "as" ~ ident }
importname  = ${ ( ident | cimport ) ~ ( "::" ~ (local | importname))? }
importdeps  = { "(" ~ "needs" ~ (type_name~ "," )* ~  type_name? ~ ")" }
import      = { (exported | key_shared )* ~  key_inline? ~ "using" ~  importdeps? ~ importname ~ importalias?  ~ ";"? }
path        = { ('a'..'z' | '0'..'9' | "/" | "." | "-" | "_" )+ }
syspath     = @{"<" ~ path ~ ">"}
localpath   = @{"\"" ~ path ~ "\""}


testop      = { "==" | "=" | "!=" | "<" | ">" | ">=" | "<=" }
testfield   = { ident ~ testop ~ expr }
testcase    = { "test" ~ ident? ~ "{" ~ testfield* ~ "}" }

struct_f    = { named_type  ~ array? ~ ";" }
struct_c    = _{"{" ~ (doc_comment |  struct_f )* ~ "}" }
struct_d    = { (exported | key_shared )* ~ (key_struct | key_union) ~ ident ~ tail? ~ (key_packed)* ~ macrocall* ~struct_c ~ ";"?}

constant    = { ( exported | key_shared)? ~ "const"  ~ named_type ~ "=" ~ expr ~ ";"}

key_static  = {"static"}
key_atomic  = {"atomic"}
key_thread_local = {"thread_local"}

istatic     = {
    (exported | key_shared)? ~
    (key_static | key_atomic | key_thread_local) ~
    named_type  ~ array? ~ "=" ~ expr ~ ";"
}

vararg          = @{"..."}
macro_args      = {ident ~ ( "," ~ ( ident | vararg) )* }
imacro          = { ( exported | key_shared)? ~ "macro" ~ ident ~ "(" ~ macro_args? ~")" ~ block }

typealias       = { (exported | key_shared )* ~ "type" ~ ident ~ macrocall*  ~ "=" ~ anon_type? ~ ";"?}

// pp

gblock = { block | (if_stm | elseif_stm | else_stm )+ }


flags  = {"flags" ~ gblock}


// statements

infix = _{
    ptraccess | memberaccess |
    moreeq | lesseq |
    equals | nequals |
    shiftleft | shiftright |
    add | subtract | multiply | divide | bitxor | boolor |
    booland | lessthan | morethan | modulo | bitand | bitor
}

equals      = { "==" }
nequals     = { "!=" }
add         = { "+"  }
subtract    = { "-"  }
multiply    = { "*"  }
divide      = { "/"  }
bitxor      = { "^"  }
booland     = { "&&" }
boolor      = { "||" }
moreeq      = { ">=" }
lesseq      = { "<=" }
lessthan    = { "<"  }
morethan    = { ">"  }
shiftleft   = { "<<" }
shiftright  = { ">>" }
modulo      = { "%"  }
bitand      = { "&"  }
bitor       = { "|"  }
ptraccess   = { "->" }
memberaccess= { "."  }
callstart   = { "("  }
arraystart  = { "["  }



expr = {
    (term ~ (callstart ~ call | arraystart ~ arrayaccess | infix ~ term) + ) |
    term |
    macrocall
}

// this is kind of a hack to get preop working. pest doesnt support empty lhs for precclimber
// so we just build another expr that is interrupted by an op with precendence 2
infix_to_precedence_2 = _{ ptraccess | memberaccess }
expr_to_precedence_2 = { term ~ (callstart ~ call | arraystart ~ arrayaccess | infix_to_precedence_2 ~ term) * }


preop  = _{boolnot | bitnot | increment |  decrement}
postop = _{ increment |  decrement }
    boolnot     = { "!" }
    bitnot      = { "~" }
    increment   = { "++" }
    decrement   = { "--" }

term    = _{
    unarypost | number_literal | char_literal | string_literal |bool_literal| struct_init | array_init |
    unarypre | takeref | deref | cast | type_name | unsafe_expr | cpp_expr | "(" ~ expr ~ ")"
}

unarypost       = { ( type_name | "(" ~ expr ~ ")") ~ postop }
unarypre        = { preop  ~ expr_to_precedence_2}
deref           = { "*"  ~ expr_to_precedence_2 }
takeref         = { "&"  ~ expr_to_precedence_2}

arrayaccess     = _{ expr ~ "]" }
cast            = { "as" ~ "<" ~ anon_type ~ ">" ~ expr_to_precedence_2 | "(" ~ anon_type ~ ")" ~ expr_to_precedence_2}

struct_init_field = { (ident ~ (":" ~ expr)? ) }
struct_init     = { anon_type ~ "{" ~  struct_init_field ~ ("," ~ struct_init_field)* ~ ","?  ~ "}" }
array_init      = { "{" ~ expr ~ ("," ~ expr)* ~ ","?  ~ "}" }

assignop    = { assignbitor | assignbitand | assignadd | assignsub | assigneq }
    assignbitor  = { "|=" }
    assignbitand = { "&=" }
    assignadd    = { "+=" }
    assignsub    = { "-=" }
    assigneq     = { "="  }

assign      = { expr ~ assignop ~ expr}
call        = { call_args? ~ ")"  }
call_args   = { expr ~ ( "," ~ expr )* }

array       = { "[" ~ expr? ~ "]" }
vardecl     = { named_type  ~ array? ~ ( "=" ~ expr )? }

semicolon   = { ";" }
stm_list    = _{ expr_stm ~ "," ~ stm_list | expr_stm }
for_stm     = {
    label? ~ (
        ("for" ~ "(" ~ stm_list? ~ semicolon ~ expr? ~ semicolon ~ stm_list? ~ ")") |
        ("for" ~ stm_list? ~ semicolon ~ expr? ~ semicolon ~ stm_list?)
    ) ~ block
}
while_stm   = { "while" ~ expr ~ block }

case_cond   = { expr ~ ("," ~ expr)* }


case_stm    = { (key_default | case_cond ) ~ "=>" ~ block }
switch_stm  = { "switch" ~ expr ~ "{" ~ case_stm* ~ "}"}
if_stm      = { "if"  ~ expr  ~ block }
elseif_stm  = { "else" ~ "if" ~ expr  ~ block }
else_stm    = { "else" ~  block }
return_stm  = { key_return ~ expr_stm? }
continue_stm  = { key_continue }
break_stm   = !{ key_break ~ ident?}
label       = ${ ident ~ ":"}
mark_stm    = ${ expr ~ WHITESPACE+ ~ "is" ~ WHITESPACE+ ~ tag_name }
unsafe_block = {"unsafe" ~ block }
unsafe_expr  = {"unsafe" ~ "<" ~ anon_type ~ ">" ~"(" ~ expr ~ ")" }
cpp_expr     = {"#" ~"(" ~ expr ~ ")" }

cblock_inner = { ( (!"}}@" ~ ANY))*}
cblock       = !{ "@{{" ~ cblock_inner ~ "}}@" }

expr_stm = _{
    vardecl |
    assign |
    expr
}


term_statement = _{
    mark_stm   |
    return_stm |
    break_stm  |
    continue_stm |
    expr_stm |
    unsafe_expr
}

statement = _{
    (macrocall ~ ";"?)  |
    switch_stm   |
    for_stm      |
    if_stm       |
    while_stm    |
    else_stm     |
    elseif_stm   |
    block        |
    cblock       |
    unsafe_block |
    (term_statement ~ ";")
}

block = { "{" ~ statement* ~ expr_stm? ~ "}" ~ ";"? }

macro_expanded_to_statements = { WHITESPACE* ~ statement*  ~ WHITESPACE*}






// file


top_level_declarations = { SOI ~ (struct_d
                    | doc_comment
                    | function
                    | closure
                    | theory
                    | ienum
                    | symbol
                    | flags
                    | import
                    | constant
                    | testcase
                    | imacro
                    | istatic
                    | typealias
                    | NEWLINE )*  ~ EOI}

