using mem;
using slice as slicem;
using slice::{Slice, MutSlice};

inline using "native.h" as native;
using <stdarg.h>::{va_list, va_start, va_end};
using <stdio.h>::{FILE};
using <string.h>::{memset};

/// a byte buffer, with guaranted terminating null byte
export struct Buffer+ {
    usize   at;
    usize   size;
    char    mem[];
}

pub theory integrity(Buffer*self) -> bool
(
    safe(self)
    && len(self->mem) >= self->size
    && self->at < len(self->mem)
    && self->at < self->size
    && nullterm(self->mem)
)

/// make an empty buffer
export fn make(Buffer mut new* self, usize tail = static(len(self->mem)))
    where tail > 0
    model integrity(self)
    model self->size == tail
{
    self->size = tail;
    self->at = 0;
    mem::set(self->mem, 0, self->size);
    static_attest(nullterm(self->mem));
}

/// make a buffer by copying a c string
export fn from_cstr(Buffer new mut* self, char *s, usize tail = static(len(self->mem)))
    where   tail > 0
    where   nullterm(s)
    model   integrity(self)
{
    make(self, tail);
    self->append_cstr(s)
}

/// make a buffer by copying raw bytes with given len
export fn from_bytes(Buffer new mut* self, u8* bytes, usize mut inlen, usize tail = static(len(self->mem)))
    where   tail > 0
    where   len(bytes) >= inlen
    model   integrity(self)
{
    make(self, tail);
    self->append_bytes(bytes, inlen);
}

/// make a buffer by copying a slice
export fn from_slice(Buffer new mut* self, Slice slice, usize tail = static(len(self->mem)))
    where   tail > 0
    where   slicem::slice::integrity(&slice)
    model   integrity(self)
{
    make(self, tail);
    self->append_slice(slice)
}



/// clear the buffer
export fn clear(Buffer mut new* self)
    where integrity(self)
    model integrity(self)
{
    self->at = 0;
    mem::set(self->mem, 0, self->size);
    static_attest(nullterm(self->mem));
}

/// length of buffer (excluding null terminator)
export fn slen(Buffer * self) -> usize
    where integrity(self)
    model return <= len(self->mem)
{
    return self->at;
}

/// buffer as null terminated c buffer
export fn cstr(Buffer * self) -> char *
    where integrity(self)
    model safe(return)
    model nullterm(return)
    model len(return) <= len(self->mem)
{
    return self->mem;
}

/// create slice pointing to used memory of this buffer, excluding null terminator
export fn as_slice(Buffer * self) -> Slice
    where integrity(self)
    model slicem::slice::integrity(&return)
{
    new sl = slicem::slice::make((u8*)self->mem, self->at);
    return sl;
}

/// create mutable slice pointing to this buffer
///
/// modifying the mutable slice will modify this buffer
///
/// warning: mut_slice does not nullterminate, possibly violating integrity
/// you need to manually attest that the mutslice does not cause
/// the last byte to be overwritten and then call static_attest(buffer::integrity(buf))
///
export fn as_mut_slice(Buffer mut * self) -> MutSlice
    where integrity(self)
    model slicem::mut_slice::integrity(&return)
{
    new sl = slicem::mut_slice::make((u8 mut*)self->mem, self->size, &self->at);
    return sl;
}

/// push a single byte
export fn push(Buffer mut * self, char b) -> bool
    where   integrity(self)
    model   integrity(self)
{
    if self->size < 2 || self->at > self->size - 2 {
        return false;
    }

    self->mem[self->at] = b;
    self->at += 1;

    return true;
}

/// remove the last byte
///
/// returns false if buffer was empty
export fn pop(Buffer mut * self) -> bool
    where   integrity(self)
    model   integrity(self)
{
    if self->at == 0 {
        return false;
    }
    self->at -= 1;
    self->mem[self->at] = 0;
    return true;
}

/// length of a null terminated c buffer, excluding the null terminator
export fn strlen(char * mut s) -> usize
    where nullterm(s)
    model return < len(s)
{
    if s == 0 {
        static_attest(len(s) > 0);
        return 0;
    }
    usize mut l = 0;
    while unsafe<bool>(s[l] != 0) {
        l++;
    }

    static_attest(l < len(s));
    return l;
}

/// returns the amount of bytes still left in the tail
///
/// note that one byte is always reserved for null terminator
export fn available(Buffer *self) -> usize
    where integrity(self)
    model return == self->size - self->at - 1
    model return < self->size
{
    return self->size - self->at - 1;
}

/// append a null terminated c buffer
export fn append_cstr(Buffer mut * self, char * cstr)
    where   nullterm(cstr)
    where   integrity(self)
    model   integrity(self)
{

    usize rest = self->available();
    usize mut inlen = strlen(cstr);
    if (inlen > rest) {
        inlen = rest;
    }

    mem::copy(cstr, self->mem + self->at, inlen);
    self->at += inlen;
    self->mem[self->at] = 0;
}

/// append a slice
export fn append_slice(Buffer mut* self, Slice slice)
    where   slicem::slice::integrity(&slice)
    where   integrity(self)
    model   integrity(self)
{
    usize rest = self->available();
    usize mut inlen = slice.size;
    if (inlen > rest) {
        inlen = rest;
    }

    mem::copy(slice.mem, self->mem + self->at, inlen);
    self->at += inlen;
    self->mem[self->at] = 0;
}

/// append raw bytes with given len
export fn append_bytes(Buffer mut* self, u8* bytes, usize mut inlen)
    where   len(bytes) >= inlen
    where   integrity(self)
    model   integrity(self)
{
    usize rest = self->available();
    if (inlen > rest) {
        inlen = rest;
    }

    mem::copy(bytes, self->mem + self->at, inlen);
    self->at += inlen;
    self->mem[self->at] = 0;
}

/// append formated string with vsnprintf
export fn format(Buffer mut * self, char *fmt, ...) -> int
    where   nullterm(fmt)
    where   integrity(self)
    model   integrity(self)
{
    va_list mut args;
    va_start (args, fmt);
    int r = vformat(self, fmt, args);
    va_end (args);

    return r;
}

export fn vformat(Buffer mut * self, char *fmt, va_list mut args) -> int
    where   nullterm(fmt)
    where   integrity(self)
    model   integrity(self)
{
    usize isfree = self->available();

    int r = as<int>(native::xN_vsnprintf(
        self->mem +  self->at,
        isfree + 1,
        fmt,
        args
    ));

    if r > 0 {
        if (usize)r >= isfree {
            self->at += isfree;
        } else {
            self->at += as<usize>(r);
        }
    }

    static_attest(self->at < len(self->mem));
    self->mem[self->at] = 0;

    return r;
}

/// test if this buffer is equal with a c string
export fn eq_cstr(Buffer * self, char * unsafe b) -> bool
    where   nullterm(b)
    where   integrity(self)
{
    let l1 = strlen(self->mem);

    if b == 0 {
        return self->at == 0;
    }
    static_attest(safe(b));
    let l2 = strlen(b);
    if l2 != l1 {
        return false;
    }
    return mem::eq(self->mem, b, l2);
}

/// test if some c string is equal another c string
export fn cstr_eq(char *unsafe a, char * unsafe b) -> bool
    where a == 0 || nullterm(a)
    where b == 0 || nullterm(b)
{
    if a == 0 || b == 0 {
        return a == b;
    }
    static_attest(safe(a));
    static_attest(safe(b));
    let l1 = strlen(a);
    let l2 = strlen(b);
    if l1 != l2 {
        return false;
    }
    return mem::eq(a, b, l2);
}

/// test if this buffer begins with some c string
export fn starts_with_cstr(Buffer * self, char *unsafe a) -> bool
    where   a == 0 || nullterm(a)
    where   integrity(self)
{
    if a == 0 {
        return self->at == 0;
    }
    static_attest(safe(a));
    usize alen = strlen(a);
    if alen > self->at {
        return false;
    }
    return mem::eq(self->mem,a,alen);
}

/// test if self ends with other buffer
export fn ends_with_cstr(Buffer *self, char *unsafe a) -> bool
    where   a == 0 || nullterm(a)
    where   integrity(self)
{
    if a == 0 {
        return self->at == 0;
    }
    static_attest(safe(a));
    usize alen = strlen(a);
    if alen > self->at {
        return false;
    }

    usize start = self->at - alen;
    return mem::eq(self->mem + start, a , alen);
}

/// append to this buffer by reading a line from a FILE
export fn fgets(Buffer mut* self, FILE mut * unsafe stream) -> bool
    where   integrity(self)
{
    char *rr = unsafe<char*>(native::xN_fgets(self->mem + self->at, self->size - self->at , stream));
    if rr == 0 {
        return false;
    }

    char * extmem = self->mem + self->at;
    static_attest(safe(extmem));
    static_attest(nullterm(extmem));
    self->at += strlen(extmem);
    return true;
}

/// append to this buffer by reading a FILE to the end
export fn fread(Buffer mut* self, FILE mut * unsafe stream) -> bool
    where   integrity(self)
{
    usize rr = unsafe<usize>(native::xN_fread(self->mem + self->at, 1, self->size - self->at - 1, stream));
    if rr == 0 {
        return false;
    }

    self->at += rr;
    unsafe {
        self->mem[self->at] = 0;
    }

    return true;
}

/// append parts of this buffer to other buffer
export fn substr(Buffer *self, usize from, usize mut size, Buffer mut * other)
    where   integrity(self)
    where   integrity(other)
    model   integrity(self)
    model   integrity(other)
{
    if self->at == 0 {
        return;
    }
    if from >= self->at {
        return;
    }
    if size == 0 {
        size = self->at;
    }
    if from + size >= self->at {
        size = self->at - from;
    }

    //printf("A len1: %zu, len2: %zu, from: %zu, size: %zu\n",
    //    self->islice.at, other->islice.at, from, size);

    if other->at + size + 1 >= other->size {
        if other->at + 1 >= other->size {
            return;
        }
        size = other->size - 1 - other->at;
    }


    // TODO: ssa claims this never happens. should probably check if thats true
    unsafe {
        if size == 0 {
            return;
        }
    }

    //TODO i'm not sure what ssa is confused about
    static_attest(size + other->at < other->size);

    unsafe { mem::copy(self->mem + from, other->mem + other->at, size); }

    other->mem[size + other->at] = 0;
    other->at += size;
}

/// split this buffer by token and copy the subbuffer into other
export fn split(Buffer *self, char token, usize mut *iterator, Buffer mut new* other, usize tail2 = static(len(other->mem))) -> bool
    where   integrity(self)
    where   tail2 > 0
    model   integrity(self)
    model   integrity(other)
{
    make(other, tail2);

    usize start = *iterator;

    if *iterator >= self->at {
        return false;
    }

    for (; *iterator < self->at; (*iterator)++) {
        if (self->mem)[*iterator] == token {
            break;
        }
    }

    usize size = *iterator - start;
    *iterator += 1;
    if size == 0 {
        return true;
    }

    substr(self, start, size, other);
    return true;
}
