using err;
using slice;
using log;

using <stdlib.h>::{__builtin_ctz};
using <string.h>::{memset};

export symbol DecodingError;

export enum Item {
    Invalid,
    Array,
    Map,
    DirtyString,
    String,
    Uint,
    True,
    False,
    Null,
}

export struct Decoder+ {
    Item                mut item;
    slice::slice::Slice mut key;
    slice::slice::Slice mut val;

    usize       blocks;
    usize       mut block;
    usize       mut start;
    bool        mut emit_an_end;
    char *      intext;
    u16         mut mask[];
}

/// stage 1 create a bitmask over json text
///
/// the pointer to the json test must be valid for the lifetime of the iterator
/// no copy is performed
///
/// expecting any json value. you might want to use decode() to skip over the first {
export fn decode_value(
    Decoder mut new*self,
    err::Err mut *e,
    char * j,
    usize l = static(len(j)),
)
    where err::checked(*e)
    where len(self->mask) >= l / 8 + (2*(usize)(l % 16 > 0))
{

    // note that we're creating only one mask, even though there are two modes
    // (string, not-string) and not-string gets interrupted excessively.
    // In my experiments, i found that cache locality of the mask matters ALOT more
    // than number of iterations. That's somewhat counterintuitive, but i guess modern x86
    // is really optimized to iterate tight loops stupid fast.
    scanmask(self->mask, j, l);

    *self = Decoder {
        blocks: l / 16 + (usize)(l % 16 > 0),
        intext: j,
    };
}

/// stage 1 create a bitmask over json text
///
/// the pointer to the json test must be valid for the lifetime of the iterator
/// no copy is performed
///
/// expecting a json object. if the json text does not start with {, an error is set
export fn decode(
    Decoder mut new*self,
    err::Err mut *e,
    char * j,
    usize l = static(len(j)),
)
    where err::checked(*e)
    where len(self->mask) >= l / 8 + (2*(usize)(l % 16 > 0))
{
    decode_value(self, e, j, l);
    static_attest(err::checked(*e));
    if !self->next(e) || self->item != Item::Map {
        e->fail(DecodingError, "expected a json object");
    }
}

/// stage 2 iterate
export fn next(Decoder mut * self, err::Err mut *e) bool
    where err::checked(*e)
    model slice::slice::integrity(&self->key)
    model slice::slice::integrity(&self->val)
    model !return || err::checked(*e)
{
    self->key.mem = 0;

    static_attest(slice::slice::integrity(&self->key));
    static_attest(slice::slice::integrity(&self->val));

    if self->emit_an_end {
        self->emit_an_end = false;
        return false;
    }

    bool    mut instring = false;
    Item    mut string_type = Item::String;
    bool    mut escaped  = false;
    usize   mut escaped_at;

    slice::slice::Slice mut val = {0};

    static_attest(len(self->mask) == self->blocks);
    static_attest(self->block < self->blocks);

    mainloop: for ; self->block < self->blocks; self->block += 1 {
        while self->mask[self->block] != 0 {
            usize xi = (self->block * 16 ) + unsafe<usize>(__builtin_ctz(self->mask[self->block]));
            self->mask[self->block] &= self->mask[self->block] - 1;
            static_attest(xi < len(self->intext));




            // branching here is faster than inlining it into where we set instring = true
            // i dunno, x86 is a cocaine cpu.
            if instring {
                switch self->intext[xi] {
                    '"' => {
                        if !escaped || escaped_at != xi - 1{
                            instring = false;
                            val.mem  =  (u8*)unsafe<char*>(self->intext + self->start);
                            val.size = xi - self->start;
                            static_attest(slice::slice::integrity(&val));
                        }
                        escaped = false;
                    }
                    92 => {
                        string_type = Item::DirtyString;
                        if escaped && escaped_at == xi - 1 {
                            escaped = false;
                        } else {
                            escaped = true;
                            escaped_at = xi;
                        }
                    }
                }
            } else {
                switch self->intext[xi] {
                    0 => {
                        break mainloop;
                    }
                    '"' => {
                        instring = true;
                        self->start = xi+1;
                        static_attest(xi < len(self->intext));
                    }
                    '{' => {
                        self->start = xi+1;
                        self->item = Item::Map;
                        return true;
                    }
                    '[' => {
                        self->start = xi+1;
                        self->item = Item::Array;
                        return true;
                    }
                    ':' => {
                        self->key = val;
                        val.mem = 0;
                        self->start = xi+1;
                    }
                    '}', ']', ',' => {
                        if self->intext[xi] == '}' || self->intext[xi] == ']' {
                            self->emit_an_end = true;
                        }
                        self->item = Item::Invalid;
                        if val.mem != 0 {
                            self->item = string_type;
                            string_type = Item::String;
                        } else {
                            // backtrack if we have not emitted a value, but maybe should have
                            // again this seems counterintuitive, but i did try masking t,f,n,0-9 instead
                            // and its alot slower than this flag mess, EVEN when we have a separate mask for
                            // string mode.
                            // also note how we're abusing the json spec here by assuming that anything below ' '
                            // is whitespace because they're not allowed in json anyway
                            for ;self->start < xi; self->start+=1 {
                                if self->intext[self->start] > ' ' {
                                    break;
                                }
                            }
                            if xi != self->start {
                                switch self->intext[self->start] {
                                    'n' => {
                                        self->item = Item::Null;
                                    }
                                    'f' => {
                                        self->item = Item::False;
                                    }
                                    't' => {
                                        self->item = Item::True;
                                    }
                                    '0', '1', '2', '3', '4', '5', '6', '7', '8','9','+','-' => {
                                        val.mem  =  (u8*)unsafe<char*>(self->intext + self->start);
                                        val.size = xi - self->start;
                                        self->item = Item::Uint;
                                        static_attest(slice::slice::integrity(&val));
                                    }
                                }
                            }
                        }

                        self->start = xi+1;

                        if self->item != Item::Invalid {
                            self->val = val;
                            return true;
                        } else {
                            if self->emit_an_end {
                                self->emit_an_end = false;
                                return false;
                            }
                        }
                    }
                    default => {
                        e->fail(DecodingError, "unexpected '%c'", self->intext[xi]);
                        self->item = Item::Invalid;
                        return true;
                    }
                }
            }
        }
    }
    return false;
}



export fn skip(Decoder mut * self, err::Err mut *e)
    where err::checked(*e)
{
    if self->item != Item::Array && self->item != Item::Map {
        return;
    }

    usize mut sk = 1;
    while sk > 0 {
        while self->next(e) {
            if self->item == Item::Array || self->item == Item::Map  {
                sk += 1;
            }
        }
        sk -= 1;
    }
}

inline using "sse.h" as sse;

fn scanmask(u16 mut * mask, char *hay, usize haylen)
    where len(hay)  >= haylen
    where len(mask) >= haylen / 16 + (2 * (usize)(haylen % 16 > 0))

if #(sse::defined(sse::__x86_64__) && sse::defined(sse::__SSE2__)) {

    unsafe {

        sse::__m128i cmpS1 = sse::_mm_set1_epi8('[');
        sse::__m128i cmpS2 = sse::_mm_set1_epi8(']');
        sse::__m128i cmpS3 = sse::_mm_set1_epi8('{');
        sse::__m128i cmpS4 = sse::_mm_set1_epi8('}');
        sse::__m128i cmpS5 = sse::_mm_set1_epi8(',');
        sse::__m128i cmpS6 = sse::_mm_set1_epi8('"');
        sse::__m128i cmpS7 = sse::_mm_set1_epi8(':');
        sse::__m128i cmpS8 = sse::_mm_set1_epi8(92);


        usize mut i = 0;
        for ; i + 16 < haylen; i += 16 {
            sse::__m128i hv = sse::_mm_setr_epi8 (
                hay[i + 0],
                hay[i + 1],
                hay[i + 2],
                hay[i + 3],
                hay[i + 4],
                hay[i + 5],
                hay[i + 6],
                hay[i + 7],
                hay[i + 8],
                hay[i + 9],
                hay[i + 10],
                hay[i + 11],
                hay[i + 12],
                hay[i + 13],
                hay[i + 14],
                hay[i + 15]
            );

            sse::__m128i ra1 =
                    sse::_mm_cmpeq_epi8(hv, cmpS1) |
                    sse::_mm_cmpeq_epi8(hv, cmpS2) |
                    sse::_mm_cmpeq_epi8(hv, cmpS3) |
                    sse::_mm_cmpeq_epi8(hv, cmpS4) |
                    sse::_mm_cmpeq_epi8(hv, cmpS5) |
                    sse::_mm_cmpeq_epi8(hv, cmpS6) |
                    sse::_mm_cmpeq_epi8(hv, cmpS7) |
                    sse::_mm_cmpeq_epi8(hv, cmpS8);
            mask[i / 16] = sse::_mm_movemask_epi8(ra1);
        }

        // do the rest as single bytes
        mask[i / 16] = 0;
        for ; i < haylen; i += 1 {
            switch hay[i] {
                '[', ']', '{', '}', ',', '"', ':', 92 => {
                    mask[ i / 16 ] |= (1 << (i % 16));
                }
            }
        }
    }
} else {
    memset(mask, 0, 2 * (haylen / 16 + (usize)(haylen % 16 > 0)));
    for usize mut i = 0 ; i < haylen; i += 1 {
        switch hay[i] {
            '[', ']', '{', '}', ',', '"', ':', 92 => {
                mask[ i / 16 ] |= (u16)(1 << (i % 16));
            }
        }
    }
}



export macro from() {
    ::json::des::impl();
}
