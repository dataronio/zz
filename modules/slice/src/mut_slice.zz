using <string.h> as c_string;
using slice::{Slice};
using slice as roslice;

export struct MutSlice {
    u8 mut* mem;
    usize   size;
    usize   mut * at;
}

pub theory integrity(MutSlice mut*self) -> bool (
        safe(self->at)
    &&  safe(self->mem)
    &&  len(self->mem) >= self->size
    &&  *self->at <= self->size
    &&  *self->at <= len(self->mem)
)

/// create new mutable slice from its components
export fn make(MutSlice new mut*self, u8 mut*mem, usize size, usize mut *at)
    where len(mem) >= size
    where safe(at)
    where *at <= size
    model integrity(self)
    model len(mem) == len(self->mem)
    model *at == *self->at
    model at == self->at
{
    self->size = size;
    self->mem  = mem;
    self->at   = at;
    static_attest(self->size == len(self->mem));
}

/// obtain the used memory as read only slice
export fn as_slice(MutSlice * self) -> Slice
    where   integrity(self)
    model   roslice::integrity(&return)
{
    let r = Slice {
        mem:    self->mem,
        size:   *self->at,
    };
    static_attest(roslice::integrity(&r));
    return r;
}

/// return remaining free bytes
export fn space(MutSlice mut * self) -> usize
    where   integrity(self)
{
    return self->size - *self->at;
}

/// append the contents of another slice
export fn append_slice(MutSlice mut * self, Slice other) -> bool
    where   integrity(self)
    where   roslice::integrity(&other)
    model   integrity(self)
{
    if other.size == 0 {
        return true;
    }
    if *self->at >= self->size || other.size >  self->size || *self->at  > self->size - other.size {
        return false;
    }

    c_string::memcpy(self->mem + *self->at, other.mem, other.size);
    *self->at += other.size;
    static_attest(*self->at < len(self->mem));
    return true;
}

/// append raw bytes
export fn append_bytes(MutSlice mut * self, u8 *b, usize l) -> bool
    where   len(b) >= l
    where   integrity(self)
    model   integrity(self)
{
    if l == 0 {
        return true;
    }
    if *self->at >= self->size || l >  self->size || *self->at  > self->size - l {
        return false;
    }

    c_string::memcpy(self->mem + *self->at, b, l);
    *self->at += l;
    static_attest(*self->at < len(self->mem));
    return true;
}

/// append a null terminated cstring, excluding its null terminator
export fn append_cstr(MutSlice mut * self, char *b) -> bool
    where   integrity(self)
    where   nullterm(b)
    model   integrity(self)
{
    if b == 0 {
        return true;
    }
    let l = unsafe<usize>(c_string::strlen(b));
    static_attest(len(b) >= l);
    return append_bytes(self, (u8*)b, l);
}

/// push a single character
export fn push(MutSlice mut * self, u8 b) -> bool
    where   integrity(self)
    model   integrity(self)
{
    if self->size < 1 || *self->at > self->size - 1 {
        return false;
    }

    self->mem[*self->at] = b;
    *self->at += 1;

    return true;
}

/// append a 16 bit integer as 2 bytes
export fn push16(MutSlice mut * self, u16 b) -> bool
    where   integrity(self)
    model   integrity(self)
{
    if self->size < 2 || *self->at > self->size - 2 {
        return false;
    }

    c_string::memcpy(self->mem + *self->at, &b, 2);
    *self->at += 2;

    return true;
}

/// append a 32 bit integer as 4 bytes
export fn push32(MutSlice mut * self, u32 b) -> bool
    where   integrity(self)
    model   integrity(self)
{
    if self->size < 4 || *self->at > self->size - 4 {
        return false;
    }

    c_string::memcpy(self->mem + *self->at, &b, 4);
    *self->at += 4;

    return true;
}

/// append a 64 bit integer as 8 bytes
export fn push64(MutSlice mut * self, u64 b) -> bool
    where   integrity(self)
    model   integrity(self)
{
    if self->size < 8 || *self->at > self->size - 8 {
        return false;
    }

    c_string::memcpy(self->mem + *self->at, &b, 8);
    *self->at += 8;

    return true;
}

/// append any sized objects as raw bytes
export fn append_obj(MutSlice mut * self, void+vt * b) -> bool
    where   integrity(self)
    model   integrity(self)
{
    if self->size < vt || *self->at >= self->size  || *self->at > self->size - vt {
        return false;
    }

    c_string::memcpy(self->mem + *self->at, b, vt);
    *self->at += vt;

    return true;
}
