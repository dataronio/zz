using pool;
using <stdio.h>::{printf};
using <assert.h>::{assert};

fn main() -> int {
    for (usize mut i= 0; i < 1000; i++) {
        m2();
    }
    return 0;
}

fn m2(){
    pool::Pool+10000 mut p;
    p.make(64);

    void mut * mut a = 0;
    for (usize mut i = 0;;i++) {
        void mut *b = p.malloc(1 + (30 * (i%3)));
        if b == 0 {
            printf("memory full after %zu rounds\n", i);
            break;
        }
        unsafe {
            *(char mut*)b = 1;
        }
        if i % 3 == 0 {
            p.free(b);
        } else {
            a = b;
        }

    }

    printf("%p\n", a);
    static_attest(pool::member(a, &p));
    p.free(a);

    void mut *b = p.malloc(180);
    assert(b == 0);

    void mut *c = p.malloc(1);
    printf("last: %p\n", c);
}

