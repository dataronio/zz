using <stdio.h>::{printf, fread, stdin, stderr};
using <stdlib.h>::{atoi};
using <string.h>::{strcmp, memset};
using err;
using toml;



test test123  {
    stdin = r#"
height = 12.0
add = "\"[{123123}:b"
v = [
  23.0
]
a = []
aa = [[], [], [[]]]
deep = "nah"

[engine]
rolling = "hard"
fuel = "electric"
charge = [
  9229.0,
  -399888.0
]
"#
    stdout = r#"height : 12
add : "[{123123}:b
v: [
  0 : 23
]
a: [
]
aa: [
  0: [
  ]
  1: [
  ]
  2: [
    0: [
    ]
  ]
]
deep : nah
engine: {
  rolling : hard
  fuel : electric
  charge: [
    0 : 9229
    1 : -399888
  ]
}
"#
}

test test_uint {
    stdin   = "a = 19\n"
    stdout  = "a : 19\n"
}

test test_sint {
    stdin   = "a = -19\n"
    stdout  = "a : -19\n"
}

test test_escape {
    stdin   = r#"a = "\"yo\no\"""#
    stdout  = r#"a : "yo
o"
"#
}

test test_array {
    stdin   = r#"a = [1,
    3, "yep"
]"#
    stdout  = r#"a: [
  0 : 1
  1 : 3
  2 : yep
]
"#
}

fn pretty(toml::U * self, err::Err mut *e, toml::Parser mut* p, char *k, toml::Value v)
    where err::checked(*e)
{
    for (usize mut i = 0; i < self->user2 * 2; i++) {
        printf(" ");
    }

    switch v.t {
        toml::ValueType::Object => {
            printf("%s: {\n", k);
            toml::next(p,  e, toml::U{
                it:     pretty,
                pop:    pop_object,
                user2:  self->user2 + 1
            });
            if err::check(e) {
                return;
            }
        }
        toml::ValueType::Array => {
            printf("%s: [\n", k);
            toml::next(p,  e, toml::U{
                it:     pretty,
                pop:    pop_array,
                user2:  self->user2 + 1
            });
            if err::check(e) {
                return;
            }
        }
        toml::ValueType::String => {
            printf("%s : %s\n", k, v.string);
        }
        toml::ValueType::Integer => {
            printf("%s : %d\n", k, v.integer);
        }
    }
}

fn pop_array(toml::U * self, err::Err mut *e, toml::Parser mut* p)
{
    for (usize mut i = 0; i < (self->user2 - 1) * 2; i++) {
        printf(" ");
    }
    printf("]\n");
}

fn pop_object(toml::U * self, err::Err mut *e, toml::Parser mut* p)
{
    for (usize mut i = 0; i < (self->user2  - 1) * 2; i++) {
        printf(" ");
    }
    printf("}\n");
}



export fn main() -> int {
    err::Err+1000 mut e = {0};
    err::make(&e);

    toml::Parser+100 mut parser = {0};
    toml::parser(&parser,  &e, toml::U{it: pretty, user2: 0});
    if err::check(&e) {
        err::eprintf(&e, stderr);
        return 2;
    }
    static_attest(err::checked(e));


    char mut buf[10];

    for(;;) {
        usize bin = as<usize>(fread(buf, sizeof(char), static(len(buf)), stdin));
        if bin == 0 {
            break;
        }
        static_attest(bin < len(buf));
        toml::push(&parser, &e, buf, bin);
        if err::check(&e) {
            err::eprintf(&e, stderr);
            return 2;
        }
    }

    parser.close(&e);
    if err::check(&e) {
        err::eprintf(&e, stderr);
        return 2;
    }


    return 0;
}
