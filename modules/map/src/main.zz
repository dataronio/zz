using map;
using err;
using log;
using pool;
using slice;
using buffer;


struct A+ {
    buffer::Buffer+ mut b;
}


pub fn main() -> int {


    new[map::key = char, map::val = char, +1000] smap = map::make();

    smap.insert_oo("bob", "uncle");
    err::assert(smap.count() == 1);

    log::info("%s", smap.get("bob"));





    new[map::key = char, +1000] amap = map::make();

    A+1000 mut a = {0};
    a.b.make();
    a.b.append_cstr("blargh");
    a.b.append_cstr(" borp");

    // too large to own
    err::assert(!amap.insert_oo("bob", &a));
    // ok to borrow
    err::assert(amap.insert_ob("bob", &a));

    err::assert(amap.count() == 1);

    err::assert(amap.insert_ob("beep", &a));
    err::assert(amap.insert_ob("boop", &a));

    err::assert(amap.count() == 3);

    let gimmeback = (A*)amap.get("bob");
    err::assert_safe(gimmeback);
    static_attest(buffer::integrity(&gimmeback->b));
    log::info("%s", gimmeback->b.cstr());

    let free_bytes = amap.p.free_bytes();
    let mut free_bytes_after_clear = free_bytes;

    for let mut keys = amap.keys(); keys.next(); {
        let mut keysize = pool::align(keys.key.size);
        let mut nodesize = pool::align(unsafe<usize>(sizeof(map::Node)));

        free_bytes_after_clear += keysize + nodesize;
    }

    amap.clear();

    err::assert(amap.count() == 0);
    err::assert(free_bytes_after_clear == amap.p.free_bytes());




    /*

    err::assert(t.insert_oo(bob.mem, uncle.mem));
    err::assert(t.count() == 1);
    err::assert(t.insert_oo(bob.mem, uncle.mem));
    err::assert(t.insert_oo(doop.mem, text.mem));
    err::assert(t.count() == 2);

    let vv = (char*)t.borrow(doop.mem);
    log::info("%s", vv);

    err::assert(t.count() == 2);
    err::assert(t.remove(doop.mem));
    err::assert(!t.remove(doop.mem));
    err::assert(t.count() == 1);

    err::assert(t.insert_oo(bob.mem, uncle.mem));
    err::assert(t.insert_oo(bob.mem, uncle.mem));
    err::assert(t.insert_bb(bob.mem, uncle.mem));
    err::assert(t.count() == 1);

    let vv2 = (char*)t.borrow(bob.mem);
    log::info("%s", vv2);


    // too large to own
    err::assert(!t.insert_oo(bob.mem, &a));
    // ok to borrow
    err::assert(t.insert_ob(bob.mem, &a));

    err::assert(t.count() == 1);


    err::assert(t.insert_oo(bob.mem,  uncle.mem));
    err::assert(t.insert_oo(CS("bob").mem, CS("unclina").mem);
    err::assert(t.insert_oo(CS("derp"), "ughlinor"));
    err::assert(t.insert_oo("foo", "baz bar biggest borp"));
    err::assert(t.remove("boba"));
    err::assert(t.count() == 3);

    for(let mut it = t.keys(); map::next(&it);) {
        let vv2 = (char*)t.borrow(it.k.mem);
        log::info(" - %s = %s", (char*)it.k.mem, vv2);
    }


    */

    return 0;
}
