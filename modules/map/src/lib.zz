using pool;
using err;
using slice;
using mem;

using <string.h>::{memset};
using <stdio.h>::{printf};
using <assert.h>::{assert};

inline using "siphash.h" as  siphash;

export theory key(Map self) type;
export theory val(Map self) type;

//TODO should not export?
export struct Node {
    u64     hash;
    Node    mut * mut next;

    bool k_owned;
    bool v_owned;
    slice::Slice k;
    slice::Slice v;
}

export struct Bucket {
    Node mut * mut root;
}

export struct Map+ {
    usize item_count;
    usize buckets_reserved;
    Bucket mut * mut buckets;
    pool::Pool+ mut p;
}

/// create a new map
export fn make(Map mut new* self, usize tt = static(len(self->p.pmem))) {
    memset(self, 0, sizeof(Map));

    self->p.make(sizeof(Bucket), tt);
    self->buckets_reserved = tt/unsafe<usize>(sizeof(Bucket))/10;
    if self->buckets_reserved < 16 {
        self->buckets_reserved = 16;
    }
    self->buckets = self->p.malloc(unsafe<usize>(sizeof(Bucket)) * self->buckets_reserved);
    err::assert_safe(self->buckets);
}

/// create a new map with an additional pool
///
/// the extra pool is used when tail memory is full
/// you can also use no tail memory at all by setting it to 0
///
///     new+1000 p = pool::make(8);
///     new+0 l = map::make_with_pool(&p);
export fn make_with_pool(Map mut new* self, pool::Pool mut *extra, usize tt = static(len(self->p.pmem))) {
    memset(self, 0, sizeof(Map));

    self->p.make(sizeof(Bucket), tt);
    self->p.extra = extra;
    self->buckets_reserved = tt/unsafe<usize>(sizeof(Bucket))/10;
    if self->buckets_reserved < 16 {
        self->buckets_reserved = 16;
    }
    self->buckets = self->p.malloc(unsafe<usize>(sizeof(Bucket)) * self->buckets_reserved);
    err::assert_safe(self->buckets);
}

/// count number of items
export fn count(Map * self) -> usize
{
    return self->item_count;
}

/// insert borrowed key and borrowed value
///
/// the borrowed references must be valid for the lifetime of the map
///
/// returns false if there's not enough memory to store the key
export fn insert_bb(
    Map mut* self, void * k, void * v,
    usize kt = static(len(k), 1) * sizeof(*k),
    usize vt = static(len(v), 1) * sizeof(*v)
) -> bool
    where !constrained(key(*self)) || typeof(*k) == key(*self)
    where !constrained(val(*self)) || typeof(*v) == val(*self)
{
    static_attest(len(k) == kt);
    static_attest(len(v) == vt);

    Node mut * nn = self->p.malloc(unsafe<usize>(sizeof(Node)));
    if nn == 0 {
        return false;
    }
    static_attest(safe(nn));
    nn->k = slice::slice::Slice{mem: k, size: kt};
    nn->k_owned = false;
    nn->v = slice::slice::Slice{mem: v, size: vt};
    nn->v_owned = false;
    nn->hash = hash(nn->k);

    return self->i_insert(nn);
}

/// insert owned key and borrowed value
///
/// the borrowed value reference must be valid for the lifetime of the map
///
/// returns false if there's not enough memory to store the key
export fn insert_ob(
    Map mut* self, void * k, void * v,
    usize kt = static(len(k), 1) * sizeof(*k),
    usize vt = static(len(v), 1) * sizeof(*v)
) -> bool
    where !constrained(key(*self)) || typeof(*k) == key(*self)
    where !constrained(val(*self)) || typeof(*v) == val(*self)
{
    static_attest(len(k) == kt);
    static_attest(len(v) == vt);

    void mut * owned_k = self->p.malloc(kt);
    if owned_k == 0 {
        return false;
    }
    static_attest(safe(owned_k));
    static_attest(len(k) == kt);
    static_attest(len(owned_k) == kt);
    mem::copy(k, owned_k, kt);

    Node mut * nn = self->p.malloc(unsafe<usize>(sizeof(Node)));
    if nn == 0 {
        self->p.free(owned_k);
        return false;
    }
    static_attest(safe(nn));
    nn->k = slice::slice::Slice{mem: owned_k, size: kt};
    nn->k_owned = true;
    nn->v = slice::slice::Slice{mem: v, size: vt};
    nn->v_owned = false;
    nn->hash = hash(nn->k);

    return self->i_insert(nn);
}

/// insert owned key and owned value
///
/// both key and value are memcpy'd into the maps pool.
/// note that if the objects hold circular refferences, they are now invalid
///
/// returns false if there's not enough memory to store the kv
export fn insert_oo(
    Map mut* self, void * k, void * v,
    usize kt = static(len(k), 1) * sizeof(*k),
    usize vt = static(len(v), 1) * sizeof(*v)
) -> bool
    where !constrained(key(*self)) || typeof(*k) == key(*self)
    where !constrained(val(*self)) || typeof(*v) == val(*self)
{
    static_attest(len(k) == kt);
    static_attest(len(v) == vt);

    void mut * owned_k = self->p.malloc(kt);
    if owned_k == 0 {
        return false;
    }

    void mut * owned_v = self->p.malloc(vt);
    if owned_v == 0 {
        self->p.free(owned_k);
        return false;
    }

    static_attest(safe(owned_k));
    static_attest(len(k) == kt);
    static_attest(len(owned_k) == kt);
    mem::copy(k, owned_k, kt);

    static_attest(safe(owned_v));
    static_attest(len(v) == vt);
    static_attest(len(owned_v) == vt);
    mem::copy(v, owned_v, vt);

    Node mut * nn = self->p.malloc(unsafe<usize>(sizeof(Node)));
    if nn == 0 {
        self->p.free(owned_k);
        self->p.free(owned_v);
        return false;
    }
    static_attest(safe(nn));
    nn->k = slice::slice::Slice{mem: owned_k, size: kt};
    nn->k_owned = true;
    nn->v = slice::slice::Slice{mem: owned_v, size: vt};
    nn->v_owned = true;

    nn->hash = hash(nn->k);

    return self->i_insert(nn);
}


fn i_insert(Map mut* self, Node mut *node) -> bool
    where slice::slice::integrity(&node->k)
    where slice::slice::integrity(&node->v)
{
    self->remove_slk(node->k, node->hash);

    usize index = (usize)node->hash % self->buckets_reserved;
    static_attest(index < len(self->buckets));
    Bucket mut* bucket = self->buckets + index;

    if bucket->root == 0 {
        bucket->root = node;
        self->item_count += 1;
        return true;
    } else {
        Node mut * mut no = bucket->root;
        for (;;) {
            if no->next == 0 {
                no->next = node;
                self->item_count += 1;
                return true;
            } else {
                no = no->next;
            }
        }
    }

    return false;
}

/// returns a pointer to a borrowed value for the key
/// or 0 if no such key exists
///
/// example:
///     let x = (MyThing *x)map.borrow("bob");
///     if x == 0 { err::panic("no such key"); }
///
export fn get(Map * self, void * k, usize kt = static(len(k), 1) * sizeof(*k)) void mut *
{
    let r = (void mut*)(get_slice(self, k, kt).mem);
    return r;
}

/// returns a slice to a borrowed value for the key
/// or an invalid slice if no such key exists
///
/// example:
///     let x = map.borrow_slice("bob");
///     if x.mem == 0 { err::panic("no such key"); }
///
export fn get_slice(Map * self, void * k, usize kt = static(len(k), 1) * sizeof(*k)) slice::slice::Slice
{
    static_attest(len(k) == kt);

    let kx = slice::slice::Slice{mem:k, size: kt};
    let hk = hash(kx);

    usize index = (usize)hk % self->buckets_reserved;
    static_attest(index < len(self->buckets));
    Bucket mut* bucket = self->buckets + index;

    if bucket->root == 0 {
        return slice::slice::Slice{mem:0};
    }

    Node mut * mut no = bucket->root;
    for (;;) {
        static_attest(safe(no));
        static_attest(slice::slice::integrity(&no->k));

        if no->hash == hk && no->k.eq(kx) {
            return no->v;
        }

        if no->next == 0 {
            return slice::slice::Slice{mem:0};
        }
        no = no->next;
    }

    return slice::slice::Slice{mem:0};
}

/// remove an entry by object key
///
/// returns true if entry was found, false otherwise
export fn remove(Map mut* self, void * k, usize kt = static(len(k), 1) * sizeof(*k)) -> bool
{
    static_attest(len(k) == kt);
    return remove_sl(self, slice::slice::Slice{mem:k, size: kt});
}

fn remove_sl(Map mut* self, slice::slice::Slice k) -> bool
    where slice::slice::integrity(&k)
{
    let hk = hash(k);
    return remove_slk(self, k, hk);
}

/// remove entry by prehashed slice key
///
/// returns true if entry was found, false otherwise
fn remove_slk(Map mut* self, slice::slice::Slice k, u64 ha) -> bool
    where slice::slice::integrity(&k)
{
    usize index = (usize)ha % self->buckets_reserved;
    static_attest(index < len(self->buckets));
    Bucket mut* bucket = self->buckets + index;

    if bucket->root == 0 {
        return false;
    }

    Node mut * mut no = bucket->root;
    static_attest(safe(no));
    static_attest(slice::slice::integrity(&no->k));
    static_attest(slice::slice::integrity(&no->v));
    if no->hash == ha && no->k.eq(k) {
        self->i_dealloc(no);
        self->item_count -= 1;
        bucket->root = 0;
        return true;
    }

    for (;;) {
        static_attest(safe(no));
        if no->next == 0 {
            return false;
        }
        static_attest(safe(no->next));
        static_attest(slice::slice::integrity(&no->next->k));
        static_attest(slice::slice::integrity(&no->next->v));
        if no->next->hash == ha && no->next->k.eq(k) {

            let tt = no->next;
            no->next = tt->next;
            self->i_dealloc(tt);
            self->item_count -= 1;

            return true;
        }
        no = no->next;
    }
    return false;
}

/// iterator
export struct Keys{
    Map mut* m;
    usize bucket;
    Node *inext;
    slice::Slice mut key;
}

/// iterate over all keys
///
/// example:
///     for (let it = map.keys(); it.next(); ) {
///         println("%.*s", it.k.size, it.k.mem);
///     }
///
export fn keys(Map mut* self) -> Keys
{
    return Keys {
        m:      self,
        bucket: 0,
    };
}

/// moves iterator forward
/// returns false if there are no more keys
export fn next(Keys mut* self) -> bool
    model slice::slice::integrity(&self->key)
{
    static_attest(safe(self->m));
    if self->inext != 0 {
        static_attest(safe(self->inext));
        self->inext = self->inext->next;
        if self->inext != 0 {
            static_attest(safe(self->inext));
            self->key  = self->inext->k;
            static_attest(slice::slice::integrity(&self->key));
            return true;
        } else {
            self->bucket += 1;
        }
    }


    for (;;) {

        if self->bucket >= self->m->buckets_reserved {
            return false;
        }

        static_attest(len(self->m->buckets) > self->bucket);
        self->inext = self->m->buckets[self->bucket].root;

        if self->inext != 0 {
            static_attest(safe(self->inext));
            self->key  = self->inext->k;
            return true;
        }
        self->bucket += 1;
    }


    return false;
}

/// Frees all keys and values. Any borrowed values are no longer valid
export fn clear(Map mut *self)
{
    for usize mut index = 0; index < self->buckets_reserved; index++ {
        static_attest(index < len(self->buckets));
        let root = self->buckets[index].root;

        if root != 0 {
            static_attest(safe(root));
            Node mut * mut no = root;

            while no != 0 {
                static_attest(safe(no));
                static_attest(slice::slice::integrity(&no->k));
                static_attest(slice::slice::integrity(&no->v));
                let nn = no->next;
                self->i_dealloc(no);
                self->item_count -= 1;
                no = nn;
            }
        }
    }
}

/// Returns true if there is a value entry for a given key, otherwise
/// false.
export fn has(Map *self, void *key) bool
{
    let value = self->get(key);

    if 0 != value {
        static_attest(safe(value));
        return true;
    }

    return false;
}

/// an alias to insert_oo()
export fn insert(Map mut* self, void * k, void * v,
    usize kt = static(len(k), 1) * sizeof(*k),
    usize vt = static(len(v), 1) * sizeof(*v)
) -> bool
    where !constrained(key(*self)) || typeof(*k) == key(*self)
    where !constrained(val(*self)) || typeof(*v) == val(*self)
{
    return self->insert_oo(k, v, kt, vt);
}

/// an alias to insert_bb()
export fn set(Map mut* self, void * k, void * v,
    usize kt = static(len(k), 1) * sizeof(*k),
    usize vt = static(len(v), 1) * sizeof(*v)
) -> bool
    where !constrained(key(*self)) || typeof(*k) == key(*self)
    where !constrained(val(*self)) || typeof(*v) == val(*self)
{
    return self->insert_bb(k, v, kt, vt);
}



static u8 siphashk[] = {1,2,3,4,6,7,8,9,0,1,2,3,4,5,6,7};
export fn hash(slice::Slice sl) -> u64
{
    u64 mut out = 0;
    siphash::siphash(
        sl.mem, sl.size,
        siphashk,
        (u8 mut*)&out, 8
    );
    return out;
}

fn i_dealloc(Map mut* self, Node mut *node)
    where slice::slice::integrity(&node->k)
    where slice::slice::integrity(&node->v)
{
    if node->k_owned {
        static_attest(pool::member(node->k.mem, &self->p));
        self->p.free(node->k.mem);
    }
    if node->v_owned {
        static_attest(pool::member(node->v.mem, &self->p));
        self->p.free(node->v.mem);
    }
    static_attest(pool::member(node, &self->p));
    self->p.free(node);
}
