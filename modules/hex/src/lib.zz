using <string.h>::{memset};
using <stdio.h>::{printf, fprintf, FILE};
using slice;

static u8 map[] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, // 01234567
    0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89:;<=>?
    0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, // @ABCDEFG
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // HIJKLMNO
};

export fn str2bin(char *in, usize inlen, u8 mut * mut out, usize outlen = static(len(out))) -> usize
    where len(in)  >= inlen
    where len(out) >= outlen
    model return <= inlen
    model return <= len(out)
{
    usize mut pos;
    u8 mut idx0;
    u8 mut idx1;
    *in is safe;

    memset(out, 0, outlen);
    for (pos = 0; ((pos < (outlen*2)) && ((pos + 1) < inlen)); pos += 2) {

        usize p0 = pos+0;
        usize p1 = pos+1;
        p0 is bound<in>;
        p1 is bound<in>;

        unsafe {
            idx0 = (((u8)in[p0]) & 0x1f) ^ 0x10;
            idx1 = (((u8)in[p1]) & 0x1f) ^ 0x10;

            out[pos/2] = map[idx0] << 4 | map[idx1];
        }
    }
    return pos/2;
}


export fn print(u8 *data, usize l = static(len(data)))
    where len(data) >= l
{
    for (usize mut i = 0; i < l; i++) {
        printf("%02x", data[i]);
    }
}


export fn dump_slice(slice::Slice s)
    where slice::slice::integrity(&s)
{
    for (usize mut i = 0; i < s.size; i++) {
        printf("%02x ", s.mem[i]);
        if i % 16 == 15 {
            printf("\n");
        }
    }
    printf("\n");
}

export fn dump(u8 * unsafe data, usize l = static(len(data)))
    where len(data) >= l
{
    for (usize mut i = 0; i < l; i++) {
        printf("%02x ", data[i]);
        if i % 16 == 15 {
            printf("\n");
        }
    }
    printf("\n");
}

export fn fdump(FILE mut *f, u8 * unsafe data, usize l = static(len(data)))
    where len(data) >= l
{
    for (usize mut i = 0; i < l; i++) {
        fprintf(f, "%02x ", data[i]);
        if i % 16 == 15 {
            printf("\n");
        }
    }
    fprintf(f, "\n");
}
