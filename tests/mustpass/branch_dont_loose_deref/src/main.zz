using <stdio.h>::{printf};
using <string.h>::{memcpy, memset};


export const usize MAX_BROKERS = 16;
export struct Broker packed {
    u8 protocol;
}
export struct Store {
    Broker broker[MAX_BROKERS];
}


pub fn parse_query(Store mut*store, usize answers) -> bool
{
    usize mut storepos = 0;

    bool mut it;
    while it  {
        // the bug was that we did a deref here
        ((store->broker)[storepos]).protocol = 2;
    }
    // and the symbol for the deref is lost here in smt but not in symbolic,
    // because in smt, the declarations are removed on pop
    // but in symbolic, symbols are a global counter exactly so we can carry over deref

    if ((store->broker)[storepos]).protocol >0 {
        storepos += 1;
    } else {
        static_attest(storepos < len(store->broker));
        memset(&(store->broker)[storepos], 0, sizeof(Broker));
    }


    return true;
}


export fn main(int argc, char **argv) -> int
    where (usize)argc <= len(argv)
{
    return 0;
}
