using log;



struct A {
    int dummy;
};

theory booze(void _) bool;

export type B = A[booze = true];


export struct X {
    B b;
}

export fn main() int {

    B mut b;
    b.dummy = 3;

    static_assert(booze(b));
    bleep(&b);
    static_assert(booze(b));




    X mut x = {0};
    x.b.dummy = 3;
    static_assert(booze(x.b));




    return 0;
}

export fn mop(B *b) int
    where b->dummy == 3
{
    return bleep(b);
}

export fn bleep(B *b) int
    where b->dummy == 3
{
    return b->dummy;
}
